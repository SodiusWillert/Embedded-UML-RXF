<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>RXF Documentation - Migration from a V5 Product to V7</title><!-- $Id: WST_2-Usage_8-Migration-V7-to-V8.htm 70210 2021-03-23 14:45:23Z dkoelbel $ $URL: https://svn.willert.de/V8/trunk/Framework/Product/RXF_CPP/RXF/Doc/Help/WST_2-Usage_8-Migration-V7-to-V8.htm $ -->


<link rel="stylesheet" href="wst.css" type="text/css" media="screen">
<link rel="stylesheet" href="wst_print.css" type="text/css" media="print">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<meta http-equiv="content-type" content="text/html; charset=utf-8"></head>
<body>
<div id="View">
<script src="TOC.js" type="text/javascript"> </script>
<div id="Content">
<h1><a name="RXF_Migration"></a><a name="V7_to_V8_Migration"></a>Migration from a V7
Product to V8</h1>
The step from RXF C++ V7.xx to V8.xx is usually easy to take. But it is
important to first read and know <a href="WST_1-Introduction_2-Whats-new-in-V8.htm">What&#8217;s new
in V8</a> (like dropped support for CMSIS 1 RTOS and a required
C++11 Compiler). Also you should first review the <a href="WST_1-Introduction_3-Restrictions.htm">restrictions</a>.<br>
<br>
The cleaner your UML model is, the easier the migration will be. If you
used a lot of overridden properties to influence code generation or
access RXF specifics in your user code, it will require more actions to
adapt your model to the new RXF.<br>
<br>
The most important changes are related to the profiles that come with
the RXF:<br>
<ul>
<li>The profiles required to work with the RXF was renamed from
"RXF_Rpy_CPP_Profile" to "RXF" and it has a new location (there is no
copy in Rhapsody's Share or UserShare directory anymore, but it resides
with the&nbsp;in RXF\Profiles\Rhapsody (where you have copied or <a href="WST_2-Usage_9-Configuration-Management.htm">checked out</a>
the RXF).</li>
<li>There are no&nbsp;separate MISRA and WSTSubversion
profiles anymore, they are always integrated in RXF profile now.</li>
</ul>
<br style="font-weight: bold;">
<span style="font-weight: bold;">Follow&nbsp;these
steps carefully to migration from RXF C++ V7.x to V8.x:</span><br><ul><li>Open copy of the model that uses RXF V7</li><li>Make sure it does not require any environments (especially <span style="font-weight: bold;">RTOS
adapters</span>) that are not available in V8.</li><ul>


</ul>
<ul>
<li>If there are components for RTOSes you don&#8217;t actually need and which
are not supported anymore, remove them from the model.</li><li><a href="WST_9-Support.htm">Contact us</a>,
if you need support for another environment that is not included in
the RXF V8 generic package.</li><ul>


</ul>
</ul>
<li>In the menu "File" select "Add profile to model" and select
"RXF\Profiles\Rhapsody\<span style="font-weight: bold;">RXF.sbsx</span>"</li>
<ul>
<li>Accept to replace the existing element by the element with a different
name, also for the following profiles.<br>
<img alt="Replace Existing Profile With Renamed Version" src="Images/MigrationV8_ReplaceExistingWithRenamedVersion.png"></li>
</ul>
<li>If the Target Debugger was used, do the same with
"RXF\Profiles\Rhapsody\<span style="font-weight: bold;">RXFMonitor.sbsx</span>"</li>
<li>If "<span style="font-weight: bold;">WSTTypesCpp</span>" was used, do the same with
"RXF\Profiles\Rhapsody\<span style="font-weight: bold;">RXFTypesCpp.sbsx</span>"</li>
<li>
If "<span style="font-weight: bold;">WSTProfileCpp</span>" was used, do the same with
"RXF\Profiles\Rhapsody\<span style="font-weight: bold;">RXFStereotypesCpp.sbsx</span>"</li>
<li>
References to "<span style="font-weight: bold;">WSTSubversion</span>" and to "<span style="font-weight: bold;">WSTMISRAC++</span>" can be removed, as
they are now integrated into the RXF profile</li>
<ul>
<li>This will only be possible, after removing references
from your model to them. For MISRA, you might need to remove a
dependency from your model to the profile and for WSTSubversion make
sure it did not contain stereotypes you still have applied to your
model.</li>
</ul>
<li>
Reference to "<span style="font-weight: bold;">WSTStyle</span>" can be removed or the V7 settings file can be
copied into the project area to maintain it individually, as it is not
part of the V8 releases anymore. It just contained some property values
for a Willert recommended look and feel of diagrams in Rhapsody.</li>

<li>If the <span style="font-weight: bold;">selected environment</span> is overridden locally, especially for
configurations, it needs to be un-overridden, as it shall be set
automatically via RXF stereotype on component level and has changed
from "<span style="font-weight: bold;">WillertRXF</span>" to "<span style="font-weight: bold;">RXF</span>".</li>
<li>When looking for appropriate V8 properties and setting them, it is
recommended to use the RXF property perspective.<br><img alt="How to activate the property perspective" src="Images/MigrationV8_RXFPropertyPerspective.png"></li>
<li>For your <span style="font-weight: bold;">components</span> and configurations you need to migrate several V7 <span style="font-weight: bold;">properties</span> to the matching V8 properties (which are sometimes slightly renamed):<br><img alt="Property migration" src="Images/MigrationV8_Properties.png"></li>
<ul><li>
<span style="font-weight: bold;">RTOS</span> and <span style="font-weight: bold;">target</span> environment selection <span style="font-weight: bold;">for the deployer</span></li><li>
If<span style="font-weight: bold;"> container classes</span> and <span style="font-weight: bold;">string</span> class are required</li><li>
If <span style="font-weight: bold;">main</span> shall be deployed</li><li>
The <span style="font-weight: bold;">V8 deployer</span> now requires the target IDE project to be specified in the
<span style="font-weight: bold;">property "RXF::Deployer::IDEProject"</span>. It is recommended to specify it
relative to the Rhapsody model. The deployer will automatically detect
which IDE exporter shall be used based on the specified file.<br>If
you want the deployer to place the files into a directory without
adapting an IDE project file, you can just specify the directory in
that property.&nbsp; </li><li>
Configuration options like <span style="font-weight: bold;">MAX_NULL_STEPS</span> and <span style="font-weight: bold;">MS_PER_TICK</span></li><li>
Please note that the generic memory pools are not available in V8
anymore, you can use the initial instances approach instead for
application specific pools.<span style="color: rgb(204, 0, 0);"></span></li><li><span style="font-weight: bold;">
Event pool sizes</span> need to be defined differently in V8. While V7 used
properties like <span style="font-weight: bold;">WST_EVT_SMALL_BLOCK_SIZE</span> with a default value of
"(sizeof(WST_EVT) + 4U)", in V8 you <span style="font-weight: bold;">only define the size in bytes of
the event parameters</span> as pool size, e.g.:
RXF::Configuration::<span style="font-weight: bold;">EVENT_SMALL_PARAMETER_SIZE</span> with a default value of
4U</li><li>
If you use an RTOS, the default values for<span style="font-weight: bold;"> task stack</span> and <span style="font-weight: bold;">message queue
size </span>etc.
need to be specified. They are not defined in an RXF specific subject
anymore, but the Rhapsody default properties for this are used: <br>Note: The Rhapsody property perspective
has a drawback: When initially the OORTX was selected as your V8 RTOS,
you first need to select the correct RTOS, apply and close the property
feature window and open it again to see the RTOS specific properties in
the RXF property perspective.<br></li></ul>







<li>
If you have <span style="font-weight: bold;">active classes</span> in your application model, make sure to
override active class specific properties like
<span style="font-weight: bold;">CG::Class::ActiveThreadPriority</span> with values that are also valid in V8.
If for example in V7 the priority was set to "<span style="font-weight: bold;">PRIORITY_HIGH</span>" (which was
defined in RXF V7) it need to be changed to "<span style="font-weight: bold;">RXF::Priority::HIGH</span>".</li><li>Check for <span style="font-weight: bold;">overridden RXF V7 properties</span> elsewhere in your model, the RXF
V8 does <span style="font-weight: bold;">not</span> have or expect any properties in the <span style="font-weight: bold;">RXF_Rpy_CPP</span> metaclass
or in the <span style="font-weight: bold;">CPP_CG::WillertRXF</span> subject. Best practice is not to locally
override properties in your application model, but use your own profile
with a set of stereotypes that override properties. When you have such
a set of stereotypes, it is easier to go through them and adapt the
overridden properties to matching properties in V8. This means you need
to check what the purpose of the old overridden V7 property was and
find a matching V8 property you can set instead. The old properties
shall be un-overridden.</li>
<li>If your application code has
dependencies to RXF V7 specifics, you need to adapt your code to the
new RXF V8 naming and interfaces.</li><li style="color: black;">V7 came with a provided default error handler which could optionally be overridden in the application model via Rhapsody's
standard content mechanism (by changing a package to or creating a new "<span style="font-weight: bold;">WST_ERR_Package</span>").
V8 required the application model to implement the error handler, as
the important error handling is very application specific.</li><ul><li style="color: black;">If you used the V7 default error handler (endless loop) you can simply add a new "<span style="font-weight: bold;">RXFErrorHandler</span>" package and edit the contained operation.<br><img alt="Add error handler package" src="Images/MigrationV8_ErrorHandlerAdd.png"><br><br><img alt="ErrorHander_error()" src="Images/MigrationV8_ErrorHandlerInBrowser.png"></li><li style="color: black;">If your model already contains an "WST_ERR_Package", you can create a new error handler package&nbsp;"RXFErrorHandler"
like above, move the contents of the old error handling operation into
the new operation and delete the old&nbsp;"WST_ERR_Package".</li></ul>
<li style="color: black;">If
your application requires some of the following legacy interfaces, it
is best practise to port your application to work directly with the V8
interfaces. However it is possible to manually add and include the
related backward-compatibility header files that can be found in the
"RXF\Source\LegacySupportV7\True" folder. Using these headers is
deprecated.</li><ul><li style="color: black;"><span style="font-weight: bold;">WST_CFG.h</span>:<br>The
file includes the V8 file RXF_Config.h (so it maps the configuration
header include) and maps WST_MS_PER_TICK to RXF::MS_PER_TICK&nbsp;</li><li style="color: black;"><span style="font-weight: bold;">WST_TMM.h</span>:<br>The
file includes the V8 file RXF_Tick.h (so it maps the tick handling
include) and wraps RXF::Tick::getTicks() as WST_TMM::getTicks().</li><li style="color: black;"><span style="font-weight: bold;">WST_TMR.h</span>:<br>The
file includes the V8 file RXF_Timer.h (so it maps the timer include)
and wraps RXF::Timer::timeToTicks() as WST_TMR::timeToTicks().</li></ul><li style="color: black;">Some RXF internal changes influence the ways you can work with generated classes in your applications code:</li><ul><li style="color: black;">Standard
types are not made available globally the the RXf V8 anymore. You can
use and include your own or our
("RXF\Profiles\Rhapsody\RXFTypesCpp.sbsx") types package.</li><li style="color: black;">startBehavior() is not available for calling via reactive interfce anymore.<br>You can off course still call it for the specific reactive class.</li><li style="color: black;">Due to changed include structures some symbols might be undefined unless you explicitely add an include where needed.</li><li style="color: black;">If your application still uses the symbol "NULL" you can manually map it to "nullptr" in your IDE or build environment.</li><li style="color: black;">Copy
constructors should now be called explicitely, this can be solved by
setting the property CPP_CG::Operation::GenerateExplicitConstructor to
False.</li></ul><li style="color: black;">Please note that the property
WST_TIMEOUT_GUARANTEE_TIME is not available anymore in V8. The RXF
always behaves as if that property is overridden to "False". For
details see help on <a href="WST_3-Technology_2-Realtime.htm">realtime behavior</a>.</li><li><span style="font-weight: bold;">Before deploying to the IDE
project</span>:</li>
<ul><li>
Make sure your rhapsody component/configuration code generation
directory is empty and does not contain any V7 generated<span style="font-weight: bold;"> leftovers like
"WST_CFG.h"</span></li></ul>
<li>
Make sure you have a <span style="font-weight: bold;">backup</span> of your IDE project that was used for V7
deployments before deploying V8 content to it. But we assume you have
it even under version control / software configuration management and
might deploy to a branched version for V8.</li>
<li><span style="font-weight: bold;">
Clean up the IDE project</span> to be used for V8 from old V7 content: all
generated and deployed application model and RXF files shall be removed.</li>
<li>
A clean command shall be done in your build environment / IDE.</li><li style="color: black;">If you notice other issues please <a href="WST_9-Support.htm">contact our support</a>.</li></ul>
</div>
  <p id="Footer">This documentation belongs to the Product RXF_CPP_V8.0.1, released on 2022-03-14. (c) 2022, Sodius Willert</p>
</div>
</body></html>